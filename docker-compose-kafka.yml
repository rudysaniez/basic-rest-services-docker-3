
version: "2.1"
  
services:
  
  product:
    build: microservices/product-service
    mem_limit: 350M
    ports:
      - "9081:8081"
    depends_on: 
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker-api,docker-kafka
      - JAVA_OPTS=-Xms256M -Xmx256M
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=1
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
      
  recommendation:
    build: microservices/recommendation-service
    mem_limit: 350M
    ports:
      - "9082:8082"
    depends_on: 
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker-api,docker-kafka
      - JAVA_OPTS=-Xms256M -Xmx256M
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=1
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
      
  review:
    build: microservices/review-service
    mem_limit: 350M
    ports:
      - "9083:8083"
    depends_on:
      reviews-db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker-api,docker-kafka
      - JAVA_OPTS=-Xms256M -Xmx256M
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=1
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
      
  product-composite:
    build: microservices/product-composite-service
    mem_limit: 350M
    ports:
      - "9080:9080"
    depends_on:
      kafka:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker-api,docker-kafka,product-composite-swagger
      - JAVA_OPTS=-Xms256M -Xmx256M
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-PRODUCTS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-PRODUCTS_PRODUCER_PARTITION-COUNT=1
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-RECOMMENDATIONS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-RECOMMENDATIONS_PRODUCER_PARTITION-COUNT=1
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-REVIEWS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-REVIEWS_PRODUCER_PARTITION-COUNT=1
      
  mongodb:
    image: mongo:3.6.9
    container_name: mongodb
    mem_limit: 350m
    ports:
      - 27017:27017
    command: mongod --smallfiles
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10
  
  reviews-db:
    image: mysql:latest
    container_name: reviews-db
    mem_limit: 350m
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=welcome
      - MYSQL_USER=michael
      - MYSQL_PASSWORD=jordan
      - MYSQL_DATABASE=reviewsdb
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-umichael", "-pjordan", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      
  kafka:
    image: wurstmeister/kafka:2.12-2.1.0
    mem_limit: 350m
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    mem_limit: 350m
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper
